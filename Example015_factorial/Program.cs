// Факториал!
//  5! = 5 * 4 * 3 * 2 * 1
//       5 * 4!
//           4 * 3!
//               3 * 2!
//                    ....
//----------------------------------------------------------------------------------------------
// int Factorial(int n)
// {
//     // если n равна 1, то мы возвращяем 1, тк это определение факториала!
//     // 1! = 1
//     // 0! = 1
//     if(n == 1) return 1;
//     else return n * Factorial(n - 1);
// }
// Console.WriteLine(Factorial(6));  // 3! = 3 * 2 * 1   == 6
// РЕКУРСИЯ !!!! - метод вызвал сам себя
//----------------------------------------------------------------------------------------------
// Пример с циклом и выводом всех чисел---------------------------------------------------------

// int Factorial(int n)
// {
//     if(n == 1) return 1;
//     else return n * Factorial(n - 1);
// }
// for (int i = 1; i < 40; i++)
// {
//     Console.WriteLine($"{i}!  {Factorial(i)}");
// }
// 1!  1
// 2!  2
// 3!  6
// 4!  24
// 5!  120
// 6!  720
// 7!  5040
// 8!  40320
// 9!  362880
// 10!  3628800
// 11!  39916800
// 12!  479001600
// 13!  1932053504
// 14!  1278945280
// 15!  2004310016
// 16!  2004189184
// 17!  -288522240  // тип данных int - далее идет переполнение! int меняем double
// 18!  -898433024
// 19!  109641728
// 20!  -2102132736
// 21!  -1195114496
// 22!  -522715136
// 23!  862453760
// 24!  -775946240
// 25!  2076180480
// 26!  -1853882368
// 27!  1484783616
// 28!  -1375731712
// 29!  -1241513984
// 30!  1409286144
// 31!  738197504
// 32!  -2147483648
// 33!  -2147483648
// 34!  0
// 35!  0
// 36!  0
// 37!  0
// 38!  0
// 39!  0

double Factorial(int n)
{
    if(n == 1) return 1;
    else return n * Factorial(n - 1);
}
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}!  {Factorial(i)}");
}
// 1!  1      ОТВЕТ !!!!
// 2!  2
// 3!  6
// 4!  24
// 5!  120
// 6!  720
// 7!  5040
// 8!  40320
// 9!  362880
// 10!  3628800
// 11!  39916800
// 12!  479001600
// 13!  6227020800
// 14!  87178291200
// 15!  1307674368000
// 16!  20922789888000
// 17!  355687428096000
// 18!  6402373705728000
// 19!  1,21645100408832E+17
// 20!  2,43290200817664E+18
// 21!  5,109094217170944E+19
// 22!  1,1240007277776077E+21
// 23!  2,585201673888498E+22
// 24!  6,204484017332394E+23
// 25!  1,5511210043330986E+25
// 26!  4,0329146112660565E+26
// 27!  1,0888869450418352E+28
// 28!  3,0488834461171384E+29
// 29!  8,841761993739701E+30
// 30!  2,6525285981219103E+32
// 31!  8,222838654177922E+33
// 32!  2,631308369336935E+35
// 33!  8,683317618811886E+36
// 34!  2,9523279903960412E+38
// 35!  1,0333147966386144E+40
// 36!  3,719933267899012E+41
// 37!  1,3763753091226343E+43
// 38!  5,23022617466601E+44
// 39!  2,0397882081197442E+46